
kursov.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  0800393c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800393c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5bd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a9  00000000  00000000  0002e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000307a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019327  00000000  00000000  00032338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106ff  00000000  00000000  0004b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009214b  00000000  00000000  0005bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003338  00000000  00000000  000edefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800389c 	.word	0x0800389c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800389c 	.word	0x0800389c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022c:	200f      	movs	r0, #15
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	011a      	lsls	r2, r3, #4
 8000240:	240e      	movs	r4, #14
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000246:	183b      	adds	r3, r7, r0
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	220c      	movs	r2, #12
 800024c:	4313      	orrs	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	2108      	movs	r1, #8
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2208      	movs	r2, #8
 800025c:	4313      	orrs	r3, r2
 800025e:	b2da      	uxtb	r2, r3
 8000260:	187b      	adds	r3, r7, r1
 8000262:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000264:	193b      	adds	r3, r7, r4
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220c      	movs	r2, #12
 800026a:	4313      	orrs	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	187b      	adds	r3, r7, r1
 8000270:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2208      	movs	r2, #8
 8000278:	4313      	orrs	r3, r2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	187a      	adds	r2, r7, r1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <lcd_send_cmd+0x78>)
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	f001 f99a 	bl	80015c4 <HAL_I2C_Master_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b005      	add	sp, #20
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000028 	.word	0x20000028

0800029c <lcd_send_data>:

void lcd_send_data (char data)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af02      	add	r7, sp, #8
 80002a2:	0002      	movs	r2, r0
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002a8:	200f      	movs	r0, #15
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	210f      	movs	r1, #15
 80002b2:	438a      	bics	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	011a      	lsls	r2, r3, #4
 80002bc:	240e      	movs	r4, #14
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	220d      	movs	r2, #13
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2108      	movs	r1, #8
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2209      	movs	r2, #9
 80002d8:	4313      	orrs	r3, r2
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	220d      	movs	r2, #13
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2209      	movs	r2, #9
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002fc:	187a      	adds	r2, r7, r1
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <lcd_send_data+0x78>)
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	214e      	movs	r1, #78	; 0x4e
 8000308:	f001 f95c 	bl	80015c4 <HAL_I2C_Master_Transmit>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b005      	add	sp, #20
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	20000028 	.word	0x20000028

08000318 <lcd_clear>:

void lcd_clear (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800031e:	2080      	movs	r0, #128	; 0x80
 8000320:	f7ff ff7e 	bl	8000220 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e005      	b.n	8000336 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800032a:	2020      	movs	r0, #32
 800032c:	f7ff ffb6 	bl	800029c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b45      	cmp	r3, #69	; 0x45
 800033a:	ddf6      	ble.n	800032a <lcd_clear+0x12>
	}
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}

08000346 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800034a:	2032      	movs	r0, #50	; 0x32
 800034c:	f000 fc98 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000350:	2030      	movs	r0, #48	; 0x30
 8000352:	f7ff ff65 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000356:	2005      	movs	r0, #5
 8000358:	f000 fc92 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x30);
 800035c:	2030      	movs	r0, #48	; 0x30
 800035e:	f7ff ff5f 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000362:	2001      	movs	r0, #1
 8000364:	f000 fc8c 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000368:	2030      	movs	r0, #48	; 0x30
 800036a:	f7ff ff59 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 800036e:	200a      	movs	r0, #10
 8000370:	f000 fc86 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000374:	2020      	movs	r0, #32
 8000376:	f7ff ff53 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 800037a:	200a      	movs	r0, #10
 800037c:	f000 fc80 	bl	8000c80 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000380:	2028      	movs	r0, #40	; 0x28
 8000382:	f7ff ff4d 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fc7a 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800038c:	2008      	movs	r0, #8
 800038e:	f7ff ff47 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000392:	2001      	movs	r0, #1
 8000394:	f000 fc74 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000398:	2001      	movs	r0, #1
 800039a:	f7ff ff41 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fc6e 	bl	8000c80 <HAL_Delay>
	HAL_Delay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fc6b 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003aa:	2006      	movs	r0, #6
 80003ac:	f7ff ff38 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 fc65 	bl	8000c80 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003b6:	200c      	movs	r0, #12
 80003b8:	f7ff ff32 	bl	8000220 <lcd_send_cmd>
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003ca:	e006      	b.n	80003da <lcd_send_string+0x18>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	607a      	str	r2, [r7, #4]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	0018      	movs	r0, r3
 80003d6:	f7ff ff61 	bl	800029c <lcd_send_data>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f4      	bne.n	80003cc <lcd_send_string+0xa>
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b002      	add	sp, #8
 80003ea:	bd80      	pop	{r7, pc}

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	4c66      	ldr	r4, [pc, #408]	; (8000588 <main+0x19c>)
 80003f0:	44a5      	add	sp, r4
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f000 fbe0 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f8da 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f9f6 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000400:	f000 f9d6 	bl	80007b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000404:	f000 f93a 	bl	800067c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000408:	f000 f9a2 	bl	8000750 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800040c:	f000 f976 	bl	80006fc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  char c[1000]={0};
 8000410:	4b5e      	ldr	r3, [pc, #376]	; (800058c <main+0x1a0>)
 8000412:	22fe      	movs	r2, #254	; 0xfe
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	4694      	mov	ip, r2
 8000418:	44bc      	add	ip, r7
 800041a:	4463      	add	r3, ip
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	3304      	adds	r3, #4
 8000422:	22f9      	movs	r2, #249	; 0xf9
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f003 fa2f 	bl	800388c <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, "im working\n\rEnter text: ", 24, -1);
 800042e:	2301      	movs	r3, #1
 8000430:	425b      	negs	r3, r3
 8000432:	4957      	ldr	r1, [pc, #348]	; (8000590 <main+0x1a4>)
 8000434:	4857      	ldr	r0, [pc, #348]	; (8000594 <main+0x1a8>)
 8000436:	2218      	movs	r2, #24
 8000438:	f002 fb28 	bl	8002a8c <HAL_UART_Transmit>
  char b=0;
 800043c:	4b56      	ldr	r3, [pc, #344]	; (8000598 <main+0x1ac>)
 800043e:	22fe      	movs	r2, #254	; 0xfe
 8000440:	0092      	lsls	r2, r2, #2
 8000442:	4694      	mov	ip, r2
 8000444:	44bc      	add	ip, r7
 8000446:	4463      	add	r3, ip
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
  char* s;
  int n=0;
 800044c:	2300      	movs	r3, #0
 800044e:	22fd      	movs	r2, #253	; 0xfd
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	18ba      	adds	r2, r7, r2
 8000454:	6013      	str	r3, [r2, #0]
  int k;
  while (1){

	  if(HAL_UART_Receive(&huart1, &b, 1, 0) == HAL_OK){
 8000456:	1cf9      	adds	r1, r7, #3
 8000458:	484e      	ldr	r0, [pc, #312]	; (8000594 <main+0x1a8>)
 800045a:	2300      	movs	r3, #0
 800045c:	2201      	movs	r2, #1
 800045e:	f002 fbbf 	bl	8002be0 <HAL_UART_Receive>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d1f7      	bne.n	8000456 <main+0x6a>

			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000466:	4b4d      	ldr	r3, [pc, #308]	; (800059c <main+0x1b0>)
 8000468:	2201      	movs	r2, #1
 800046a:	2108      	movs	r1, #8
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fff5 	bl	800145c <HAL_GPIO_WritePin>
		  if(b != 13){
 8000472:	4b49      	ldr	r3, [pc, #292]	; (8000598 <main+0x1ac>)
 8000474:	22fe      	movs	r2, #254	; 0xfe
 8000476:	0092      	lsls	r2, r2, #2
 8000478:	4694      	mov	ip, r2
 800047a:	44bc      	add	ip, r7
 800047c:	4463      	add	r3, ip
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b0d      	cmp	r3, #13
 8000482:	d01f      	beq.n	80004c4 <main+0xd8>
			  c[n]=b;
 8000484:	4b44      	ldr	r3, [pc, #272]	; (8000598 <main+0x1ac>)
 8000486:	22fe      	movs	r2, #254	; 0xfe
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	4694      	mov	ip, r2
 800048c:	44bc      	add	ip, r7
 800048e:	4463      	add	r3, ip
 8000490:	7819      	ldrb	r1, [r3, #0]
 8000492:	4b3e      	ldr	r3, [pc, #248]	; (800058c <main+0x1a0>)
 8000494:	22fe      	movs	r2, #254	; 0xfe
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	18d2      	adds	r2, r2, r3
 800049c:	20fd      	movs	r0, #253	; 0xfd
 800049e:	0080      	lsls	r0, r0, #2
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	18d3      	adds	r3, r2, r3
 80004a6:	1c0a      	adds	r2, r1, #0
 80004a8:	701a      	strb	r2, [r3, #0]
			  n++;
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	183a      	adds	r2, r7, r0
 80004b2:	6013      	str	r3, [r2, #0]
			  HAL_UART_Transmit(&huart1, &b, 1, -1);
 80004b4:	2301      	movs	r3, #1
 80004b6:	425b      	negs	r3, r3
 80004b8:	1cf9      	adds	r1, r7, #3
 80004ba:	4836      	ldr	r0, [pc, #216]	; (8000594 <main+0x1a8>)
 80004bc:	2201      	movs	r2, #1
 80004be:	f002 fae5 	bl	8002a8c <HAL_UART_Transmit>
 80004c2:	e025      	b.n	8000510 <main+0x124>
			  //sprintf(c,"%c%c", c, b);
		  }
		  else {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004c4:	4b35      	ldr	r3, [pc, #212]	; (800059c <main+0x1b0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 ffc6 	bl	800145c <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, "\n\rtext is:   ", 9 , -1);
 80004d0:	2301      	movs	r3, #1
 80004d2:	425b      	negs	r3, r3
 80004d4:	4932      	ldr	r1, [pc, #200]	; (80005a0 <main+0x1b4>)
 80004d6:	482f      	ldr	r0, [pc, #188]	; (8000594 <main+0x1a8>)
 80004d8:	2209      	movs	r2, #9
 80004da:	f002 fad7 	bl	8002a8c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &c, n+1, -1);
 80004de:	24fd      	movs	r4, #253	; 0xfd
 80004e0:	00a4      	lsls	r4, r4, #2
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	2301      	movs	r3, #1
 80004ee:	425b      	negs	r3, r3
 80004f0:	1d39      	adds	r1, r7, #4
 80004f2:	4828      	ldr	r0, [pc, #160]	; (8000594 <main+0x1a8>)
 80004f4:	f002 faca 	bl	8002a8c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n\rEnter text: ", 14, -1);
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	4929      	ldr	r1, [pc, #164]	; (80005a4 <main+0x1b8>)
 80004fe:	4825      	ldr	r0, [pc, #148]	; (8000594 <main+0x1a8>)
 8000500:	220e      	movs	r2, #14
 8000502:	f002 fac3 	bl	8002a8c <HAL_UART_Transmit>

		  n=0;
 8000506:	2300      	movs	r3, #0
 8000508:	193a      	adds	r2, r7, r4
 800050a:	6013      	str	r3, [r2, #0]
		  lcd_clear();
 800050c:	f7ff ff04 	bl	8000318 <lcd_clear>
		  }
		  s=c;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	22fc      	movs	r2, #252	; 0xfc
 8000514:	0092      	lsls	r2, r2, #2
 8000516:	18ba      	adds	r2, r7, r2
 8000518:	6013      	str	r3, [r2, #0]
		  if(b == 13){
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <main+0x1ac>)
 800051c:	22fe      	movs	r2, #254	; 0xfe
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	4694      	mov	ip, r2
 8000522:	44bc      	add	ip, r7
 8000524:	4463      	add	r3, ip
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b0d      	cmp	r3, #13
 800052a:	d106      	bne.n	800053a <main+0x14e>
			  memset(c,0,1000);}
 800052c:	23fa      	movs	r3, #250	; 0xfa
 800052e:	009a      	lsls	r2, r3, #2
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2100      	movs	r1, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f003 f9a9 	bl	800388c <memset>
		  HAL_TIM_Base_Start(&htim16);
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x1bc>)
 800053c:	0018      	movs	r0, r3
 800053e:	f002 f997 	bl	8002870 <HAL_TIM_Base_Start>

	  	 		 uint16_t tick = __HAL_TIM_GET_COUNTER(&htim16);
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <main+0x1bc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000548:	4918      	ldr	r1, [pc, #96]	; (80005ac <main+0x1c0>)
 800054a:	187b      	adds	r3, r7, r1
 800054c:	801a      	strh	r2, [r3, #0]
	  	 		 if(0 < tick && tick < 500){
 800054e:	000a      	movs	r2, r1
 8000550:	18bb      	adds	r3, r7, r2
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <main+0x16e>
 8000558:	e77d      	b.n	8000456 <main+0x6a>
 800055a:	18bb      	adds	r3, r7, r2
 800055c:	881a      	ldrh	r2, [r3, #0]
 800055e:	23fa      	movs	r3, #250	; 0xfa
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	d300      	bcc.n	8000568 <main+0x17c>
 8000566:	e776      	b.n	8000456 <main+0x6a>
	  	 			lcd_init();
 8000568:	f7ff feed 	bl	8000346 <lcd_init>
	  	 			lcd_send_string(s);
 800056c:	23fc      	movs	r3, #252	; 0xfc
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff ff24 	bl	80003c2 <lcd_send_string>
	  	 		 	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <main+0x1b0>)
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	0018      	movs	r0, r3
 8000582:	f000 ff6b 	bl	800145c <HAL_GPIO_WritePin>
	  if(HAL_UART_Receive(&huart1, &b, 1, 0) == HAL_OK){
 8000586:	e766      	b.n	8000456 <main+0x6a>
 8000588:	fffffc04 	.word	0xfffffc04
 800058c:	fffffc0c 	.word	0xfffffc0c
 8000590:	080038b4 	.word	0x080038b4
 8000594:	200000b8 	.word	0x200000b8
 8000598:	fffffc0b 	.word	0xfffffc0b
 800059c:	48000400 	.word	0x48000400
 80005a0:	080038d0 	.word	0x080038d0
 80005a4:	080038e0 	.word	0x080038e0
 80005a8:	20000140 	.word	0x20000140
 80005ac:	000003ee 	.word	0x000003ee

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b099      	sub	sp, #100	; 0x64
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	242c      	movs	r4, #44	; 0x2c
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2334      	movs	r3, #52	; 0x34
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 f963 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	231c      	movs	r3, #28
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 f95b 	bl	800388c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2318      	movs	r3, #24
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 f954 	bl	800388c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2210      	movs	r2, #16
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2202      	movs	r2, #2
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	0212      	lsls	r2, r2, #8
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0352      	lsls	r2, r2, #13
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	187b      	adds	r3, r7, r1
 8000616:	0018      	movs	r0, r3
 8000618:	f001 faec 	bl	8001bf4 <HAL_RCC_OscConfig>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000620:	f000 f93a 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	211c      	movs	r1, #28
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2202      	movs	r2, #2
 8000630:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2101      	movs	r1, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fe5c 	bl	8002300 <HAL_RCC_ClockConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800064c:	f000 f924 	bl	8000898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f001 ffc5 	bl	80025f4 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 f913 	bl	8000898 <Error_Handler>
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b019      	add	sp, #100	; 0x64
 8000678:	bd90      	pop	{r4, r7, pc}
	...

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 feed 	bl	8001498 <HAL_I2C_Init>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 f8e9 	bl	8000898 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f9fa 	bl	8001ac4 <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f8e0 	bl	8000898 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fa3d 	bl	8001b5c <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f8d7 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40005400 	.word	0x40005400
 80006f8:	2000090e 	.word	0x2000090e

080006fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_TIM16_Init+0x48>)
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <MX_TIM16_Init+0x4c>)
 8000704:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000 - 1;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_TIM16_Init+0x48>)
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <MX_TIM16_Init+0x50>)
 800070a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_TIM16_Init+0x48>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_TIM16_Init+0x48>)
 8000714:	22fa      	movs	r2, #250	; 0xfa
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_TIM16_Init+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_TIM16_Init+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_TIM16_Init+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_TIM16_Init+0x48>)
 800072e:	0018      	movs	r0, r3
 8000730:	f002 f84e 	bl	80027d0 <HAL_TIM_Base_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000738:	f000 f8ae 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000140 	.word	0x20000140
 8000748:	40014400 	.word	0x40014400
 800074c:	0000bb7f 	.word	0x0000bb7f

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART1_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	0252      	lsls	r2, r2, #9
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000794:	0018      	movs	r0, r3
 8000796:	f002 f925 	bl	80029e4 <HAL_UART_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f87b 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	40013800 	.word	0x40013800

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x38>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_DMA_Init+0x38>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x38>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200a      	movs	r0, #10
 80007d4:	f000 fb24 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007d8:	200a      	movs	r0, #10
 80007da:	f000 fb36 	bl	8000e4a <HAL_NVIC_EnableIRQ>

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	240c      	movs	r4, #12
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 f845 	bl	800388c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	03c9      	lsls	r1, r1, #15
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0289      	lsls	r1, r1, #10
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_GPIO_Init+0xa4>)
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_GPIO_Init+0xa4>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	02c9      	lsls	r1, r1, #11
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_GPIO_Init+0xa4>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	02db      	lsls	r3, r3, #11
 8000850:	4013      	ands	r3, r2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000858:	2200      	movs	r2, #0
 800085a:	2108      	movs	r1, #8
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fdfd 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2208      	movs	r2, #8
 8000868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800087c:	187b      	adds	r3, r7, r1
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f000 fc82 	bl	800118c <HAL_GPIO_Init>

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b009      	add	sp, #36	; 0x24
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	619a      	str	r2, [r3, #24]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	69da      	ldr	r2, [r3, #28]
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0549      	lsls	r1, r1, #21
 80008cc:	430a      	orrs	r2, r1
 80008ce:	61da      	str	r2, [r3, #28]
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_MspInit+0x44>)
 80008d2:	69da      	ldr	r2, [r3, #28]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	055b      	lsls	r3, r3, #21
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	2414      	movs	r4, #20
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f002 ffc4 	bl	800388c <memset>
  if(hi2c->Instance==I2C1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_I2C_MspInit+0x94>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d133      	bne.n	8000976 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_I2C_MspInit+0x98>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_I2C_MspInit+0x98>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_I2C_MspInit+0x98>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	22c0      	movs	r2, #192	; 0xc0
 800092e:	00d2      	lsls	r2, r2, #3
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2212      	movs	r2, #18
 8000938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2201      	movs	r2, #1
 800093e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2203      	movs	r2, #3
 8000944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2204      	movs	r2, #4
 800094a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	187a      	adds	r2, r7, r1
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fc19 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_I2C_MspInit+0x98>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_MspInit+0x98>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0389      	lsls	r1, r1, #14
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_MspInit+0x98>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	039b      	lsls	r3, r3, #14
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b00b      	add	sp, #44	; 0x2c
 800097c:	bd90      	pop	{r4, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40005400 	.word	0x40005400
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_TIM_Base_MspInit+0x38>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10d      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0289      	lsls	r1, r1, #10
 80009a4:	430a      	orrs	r2, r1
 80009a6:	619a      	str	r2, [r3, #24]
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40014400 	.word	0x40014400
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	2414      	movs	r4, #20
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 ff56 	bl	800388c <memset>
  if(huart->Instance==USART1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a33      	ldr	r2, [pc, #204]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d15f      	bne.n	8000aaa <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	01c9      	lsls	r1, r1, #7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	619a      	str	r2, [r3, #24]
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	01db      	lsls	r3, r3, #7
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	02c9      	lsls	r1, r1, #11
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	02db      	lsls	r3, r3, #11
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	22c0      	movs	r2, #192	; 0xc0
 8000a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f000 fb9f 	bl	800118c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0xfc>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 f9ff 	bl	8000e84 <HAL_DMA_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000a8a:	f7ff ff05 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a92:	671a      	str	r2, [r3, #112]	; 0x70
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	201b      	movs	r0, #27
 8000aa0:	f000 f9be 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa4:	201b      	movs	r0, #27
 8000aa6:	f000 f9d0 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b00b      	add	sp, #44	; 0x2c
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	20000074 	.word	0x20000074
 8000ac4:	40020030 	.word	0x40020030

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f8ac 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <DMA1_Channel2_3_IRQHandler+0x14>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fa85 	bl	800100e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000074 	.word	0x20000074

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <USART1_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 f952 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200000b8 	.word	0x200000b8

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b3a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b3c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <LoopForever+0xa>)
    CMP R1, R2
 8000b40:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b42:	d105      	bne.n	8000b50 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b46:	4913      	ldr	r1, [pc, #76]	; (8000b94 <LoopForever+0x12>)
    STR R1, [R0]
 8000b48:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b4c:	4913      	ldr	r1, [pc, #76]	; (8000b9c <LoopForever+0x1a>)
    STR R1, [R0]
 8000b4e:	6001      	str	r1, [r0, #0]

08000b50 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b52:	4914      	ldr	r1, [pc, #80]	; (8000ba4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <LoopForever+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b68:	4c11      	ldr	r4, [pc, #68]	; (8000bb0 <LoopForever+0x2e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f7ff ffd7 	bl	8000b28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f002 fe63 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fc35 	bl	80003ec <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b88:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b8c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b90:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b94:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b98:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b9c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba8:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb0:	2000018c 	.word	0x2000018c

08000bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_Init+0x24>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_Init+0x24>)
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f809 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bce:	f7ff fe69 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_InitTick+0x5c>)
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	23fa      	movs	r3, #250	; 0xfa
 8000bf4:	0098      	lsls	r0, r3, #2
 8000bf6:	f7ff fa87 	bl	8000108 <__udivsi3>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fa82 	bl	8000108 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f92f 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e00f      	b.n	8000c34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d80b      	bhi.n	8000c32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f8fc 	bl	8000e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_InitTick+0x64>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	18d2      	adds	r2, r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000188 	.word	0x20000188

08000c6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000188 	.word	0x20000188

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff0 	bl	8000c6c <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	f7ff ffe0 	bl	8000c6c <HAL_GetTick>
 8000cac:	0002      	movs	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cda:	d809      	bhi.n	8000cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_EnableIRQ+0x30>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
  }
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d10:	d828      	bhi.n	8000d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	33c0      	adds	r3, #192	; 0xc0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	589b      	ldr	r3, [r3, r2]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d62:	e031      	b.n	8000dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3306      	adds	r3, #6
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001c      	movs	r4, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	4023      	ands	r3, r4
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045b      	lsls	r3, r3, #17
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dec:	2301      	movs	r3, #1
 8000dee:	e010      	b.n	8000e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SysTick_Config+0x44>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x44>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffaf 	bl	8000dd8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e036      	b.n	8000f08 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2221      	movs	r2, #33	; 0x21
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <HAL_DMA_Init+0x8c>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f932 	bl	8001154 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2221      	movs	r2, #33	; 0x21
 8000efa:	2101      	movs	r1, #1
 8000efc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2220      	movs	r2, #32
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}  
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	ffffc00f 	.word	0xffffc00f

08000f14 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2221      	movs	r2, #33	; 0x21
 8000f20:	5c9b      	ldrb	r3, [r3, r2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d008      	beq.n	8000f3a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e020      	b.n	8000f7c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	210e      	movs	r1, #14
 8000f46:	438a      	bics	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	438a      	bics	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f62:	2101      	movs	r1, #1
 8000f64:	4091      	lsls	r1, r2
 8000f66:	000a      	movs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2221      	movs	r2, #33	; 0x21
 8000f6e:	2101      	movs	r1, #1
 8000f70:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2221      	movs	r2, #33	; 0x21
 8000f98:	5c9b      	ldrb	r3, [r3, r2]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d006      	beq.n	8000fae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e028      	b.n	8001000 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	210e      	movs	r1, #14
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2221      	movs	r2, #33	; 0x21
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	0010      	movs	r0, r2
 8000ffe:	4798      	blx	r3
    } 
  }
  return status;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2204      	movs	r2, #4
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	d024      	beq.n	8001080 <HAL_DMA_IRQHandler+0x72>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2204      	movs	r2, #4
 800103a:	4013      	ands	r3, r2
 800103c:	d020      	beq.n	8001080 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2220      	movs	r2, #32
 8001046:	4013      	ands	r3, r2
 8001048:	d107      	bne.n	800105a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2104      	movs	r1, #4
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2104      	movs	r1, #4
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <HAL_DMA_IRQHandler+0x66>
 8001072:	e06a      	b.n	800114a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	0010      	movs	r0, r2
 800107c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e064      	b.n	800114a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	d02b      	beq.n	80010e8 <HAL_DMA_IRQHandler+0xda>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d027      	beq.n	80010e8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2220      	movs	r2, #32
 80010a0:	4013      	ands	r3, r2
 80010a2:	d10b      	bne.n	80010bc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	210a      	movs	r1, #10
 80010b0:	438a      	bics	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2221      	movs	r2, #33	; 0x21
 80010b8:	2101      	movs	r1, #1
 80010ba:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c4:	2102      	movs	r1, #2
 80010c6:	4091      	lsls	r1, r2
 80010c8:	000a      	movs	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d036      	beq.n	800114a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	0010      	movs	r0, r2
 80010e4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80010e6:	e030      	b.n	800114a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2208      	movs	r2, #8
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	d028      	beq.n	800114a <HAL_DMA_IRQHandler+0x13c>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2208      	movs	r2, #8
 80010fc:	4013      	ands	r3, r2
 80010fe:	d024      	beq.n	800114a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	210e      	movs	r1, #14
 800110c:	438a      	bics	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	2101      	movs	r1, #1
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2221      	movs	r2, #33	; 0x21
 800112a:	2101      	movs	r1, #1
 800112c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	0010      	movs	r0, r2
 8001146:	4798      	blx	r3
    }
   }
}  
 8001148:	e7ff      	b.n	800114a <HAL_DMA_IRQHandler+0x13c>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <DMA_CalcBaseAndBitshift+0x30>)
 8001162:	4694      	mov	ip, r2
 8001164:	4463      	add	r3, ip
 8001166:	2114      	movs	r1, #20
 8001168:	0018      	movs	r0, r3
 800116a:	f7fe ffcd 	bl	8000108 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	009a      	lsls	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <DMA_CalcBaseAndBitshift+0x34>)
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	bffdfff8 	.word	0xbffdfff8
 8001188:	40020000 	.word	0x40020000

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e149      	b.n	8001430 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d100      	bne.n	80011b4 <HAL_GPIO_Init+0x28>
 80011b2:	e13a      	b.n	800142a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00b      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c8:	2b11      	cmp	r3, #17
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	2201      	movs	r2, #1
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0xea>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d123      	bne.n	80012be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	58d3      	ldr	r3, [r2, r3]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2207      	movs	r2, #7
 8001288:	4013      	ands	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2107      	movs	r1, #7
 80012a2:	400b      	ands	r3, r1
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	6939      	ldr	r1, [r7, #16]
 80012bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	401a      	ands	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	055b      	lsls	r3, r3, #21
 80012fa:	4013      	ands	r3, r2
 80012fc:	d100      	bne.n	8001300 <HAL_GPIO_Init+0x174>
 80012fe:	e094      	b.n	800142a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x2bc>)
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x2bc>)
 8001306:	2101      	movs	r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x2bc>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x2c0>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	589b      	ldr	r3, [r3, r2]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	409a      	lsls	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	2390      	movs	r3, #144	; 0x90
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	429a      	cmp	r2, r3
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x1d6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a41      	ldr	r2, [pc, #260]	; (8001450 <HAL_GPIO_Init+0x2c4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x1d2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_GPIO_Init+0x2c8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x1ce>
 8001356:	2302      	movs	r3, #2
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x1d8>
 800135a:	2305      	movs	r3, #5
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x1d8>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x1d8>
 8001362:	2300      	movs	r3, #0
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	2103      	movs	r1, #3
 8001368:	400a      	ands	r2, r1
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x2c0>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	035b      	lsls	r3, r3, #13
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	039b      	lsls	r3, r3, #14
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	40da      	lsrs	r2, r3
 8001438:	1e13      	subs	r3, r2, #0
 800143a:	d000      	beq.n	800143e <HAL_GPIO_Init+0x2b2>
 800143c:	e6ae      	b.n	800119c <HAL_GPIO_Init+0x10>
  } 
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b006      	add	sp, #24
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	0008      	movs	r0, r1
 8001466:	0011      	movs	r1, r2
 8001468:	1cbb      	adds	r3, r7, #2
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	1c0a      	adds	r2, r1, #0
 8001472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	1c7b      	adds	r3, r7, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e082      	b.n	80015b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2241      	movs	r2, #65	; 0x41
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fa13 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	2124      	movs	r1, #36	; 0x24
 80014cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	438a      	bics	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4934      	ldr	r1, [pc, #208]	; (80015b8 <HAL_I2C_Init+0x120>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4931      	ldr	r1, [pc, #196]	; (80015bc <HAL_I2C_Init+0x124>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0209      	lsls	r1, r1, #8
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e007      	b.n	8001526 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2184      	movs	r1, #132	; 0x84
 8001520:	0209      	lsls	r1, r1, #8
 8001522:	430a      	orrs	r2, r1
 8001524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d104      	bne.n	8001538 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	491f      	ldr	r1, [pc, #124]	; (80015c0 <HAL_I2C_Init+0x128>)
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	491a      	ldr	r1, [pc, #104]	; (80015bc <HAL_I2C_Init+0x124>)
 8001554:	400a      	ands	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	431a      	orrs	r2, r3
 8001562:	0011      	movs	r1, r2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	021a      	lsls	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69d9      	ldr	r1, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	2120      	movs	r1, #32
 800159e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2242      	movs	r2, #66	; 0x42
 80015aa:	2100      	movs	r1, #0
 80015ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	f0ffffff 	.word	0xf0ffffff
 80015bc:	ffff7fff 	.word	0xffff7fff
 80015c0:	02008000 	.word	0x02008000

080015c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	0008      	movs	r0, r1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	0019      	movs	r1, r3
 80015d2:	230a      	movs	r3, #10
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	1c02      	adds	r2, r0, #0
 80015d8:	801a      	strh	r2, [r3, #0]
 80015da:	2308      	movs	r3, #8
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	1c0a      	adds	r2, r1, #0
 80015e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2241      	movs	r2, #65	; 0x41
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b20      	cmp	r3, #32
 80015ec:	d000      	beq.n	80015f0 <HAL_I2C_Master_Transmit+0x2c>
 80015ee:	e0e7      	b.n	80017c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_I2C_Master_Transmit+0x3a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e0e1      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001606:	f7ff fb31 	bl	8000c6c <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	0219      	lsls	r1, r3, #8
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2319      	movs	r3, #25
 800161a:	2201      	movs	r2, #1
 800161c:	f000 f8fc 	bl	8001818 <I2C_WaitOnFlagUntilTimeout>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2241      	movs	r2, #65	; 0x41
 800162c:	2121      	movs	r1, #33	; 0x21
 800162e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2242      	movs	r2, #66	; 0x42
 8001634:	2110      	movs	r1, #16
 8001636:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2208      	movs	r2, #8
 8001648:	18ba      	adds	r2, r7, r2
 800164a:	8812      	ldrh	r2, [r2, #0]
 800164c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d911      	bls.n	8001682 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	b2da      	uxtb	r2, r3
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	045c      	lsls	r4, r3, #17
 800166e:	230a      	movs	r3, #10
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_I2C_Master_Transmit+0x208>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	0023      	movs	r3, r4
 800167c:	f000 f9ec 	bl	8001a58 <I2C_TransferConfig>
 8001680:	e075      	b.n	800176e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	b2da      	uxtb	r2, r3
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	049c      	lsls	r4, r3, #18
 8001696:	230a      	movs	r3, #10
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	8819      	ldrh	r1, [r3, #0]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_I2C_Master_Transmit+0x208>)
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	0023      	movs	r3, r4
 80016a4:	f000 f9d8 	bl	8001a58 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80016a8:	e061      	b.n	800176e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 f8f0 	bl	8001896 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e081      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03a      	beq.n	800176e <HAL_I2C_Master_Transmit+0x1aa>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d136      	bne.n	800176e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	0013      	movs	r3, r2
 800170a:	2200      	movs	r2, #0
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	f000 f883 	bl	8001818 <I2C_WaitOnFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e053      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	2bff      	cmp	r3, #255	; 0xff
 8001722:	d911      	bls.n	8001748 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	045c      	lsls	r4, r3, #17
 8001734:	230a      	movs	r3, #10
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	8819      	ldrh	r1, [r3, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	0023      	movs	r3, r4
 8001742:	f000 f989 	bl	8001a58 <I2C_TransferConfig>
 8001746:	e012      	b.n	800176e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	b2da      	uxtb	r2, r3
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	049c      	lsls	r4, r3, #18
 800175c:	230a      	movs	r3, #10
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	8819      	ldrh	r1, [r3, #0]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	0023      	movs	r3, r4
 800176a:	f000 f975 	bl	8001a58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d198      	bne.n	80016aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f8c8 	bl	8001914 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01a      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <HAL_I2C_Master_Transmit+0x20c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2241      	movs	r2, #65	; 0x41
 80017a8:	2120      	movs	r1, #32
 80017aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2242      	movs	r2, #66	; 0x42
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	2100      	movs	r1, #0
 80017ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b007      	add	sp, #28
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	80002000 	.word	0x80002000
 80017d0:	fe00e800 	.word	0xfe00e800

080017d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d103      	bne.n	80017f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d007      	beq.n	8001810 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	619a      	str	r2, [r3, #24]
  }
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001828:	e021      	b.n	800186e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	d01e      	beq.n	800186e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001830:	f7ff fa1c 	bl	8000c6c <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d302      	bcc.n	8001846 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d113      	bne.n	800186e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	2220      	movs	r2, #32
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2241      	movs	r2, #65	; 0x41
 8001856:	2120      	movs	r1, #32
 8001858:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2242      	movs	r2, #66	; 0x42
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	4013      	ands	r3, r2
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	425a      	negs	r2, r3
 800187e:	4153      	adcs	r3, r2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	001a      	movs	r2, r3
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d0ce      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}

08001896 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018a2:	e02b      	b.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f86e 	bl	800198c <I2C_IsAcknowledgeFailed>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e029      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3301      	adds	r3, #1
 80018bc:	d01e      	beq.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff f9d5 	bl	8000c6c <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d113      	bne.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	2220      	movs	r2, #32
 80018da:	431a      	orrs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2241      	movs	r2, #65	; 0x41
 80018e4:	2120      	movs	r1, #32
 80018e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2242      	movs	r2, #66	; 0x42
 80018ec:	2100      	movs	r1, #0
 80018ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e007      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d1cc      	bne.n	80018a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001920:	e028      	b.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0018      	movs	r0, r3
 800192a:	f000 f82f 	bl	800198c <I2C_IsAcknowledgeFailed>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e026      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f999 	bl	8000c6c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d113      	bne.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	2220      	movs	r2, #32
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2241      	movs	r2, #65	; 0x41
 800195c:	2120      	movs	r1, #32
 800195e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2242      	movs	r2, #66	; 0x42
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2220      	movs	r2, #32
 800197c:	4013      	ands	r3, r2
 800197e:	2b20      	cmp	r3, #32
 8001980:	d1cf      	bne.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2210      	movs	r2, #16
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d151      	bne.n	8001a4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a6:	e021      	b.n	80019ec <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	d01e      	beq.n	80019ec <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7ff f95d 	bl	8000c6c <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <I2C_IsAcknowledgeFailed+0x38>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d113      	bne.n	80019ec <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	2220      	movs	r2, #32
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	2120      	movs	r1, #32
 80019d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2242      	movs	r2, #66	; 0x42
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e02f      	b.n	8001a4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2220      	movs	r2, #32
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d1d6      	bne.n	80019a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2210      	movs	r2, #16
 8001a00:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2220      	movs	r2, #32
 8001a08:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff fee1 	bl	80017d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	490d      	ldr	r1, [pc, #52]	; (8001a54 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	2204      	movs	r2, #4
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2241      	movs	r2, #65	; 0x41
 8001a32:	2120      	movs	r1, #32
 8001a34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2242      	movs	r2, #66	; 0x42
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	fe00e800 	.word	0xfe00e800

08001a58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	0008      	movs	r0, r1
 8001a62:	0011      	movs	r1, r2
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	240a      	movs	r4, #10
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	1c02      	adds	r2, r0, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	2009      	movs	r0, #9
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	1c0a      	adds	r2, r1, #0
 8001a74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	0d51      	lsrs	r1, r2, #21
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	00d2      	lsls	r2, r2, #3
 8001a84:	400a      	ands	r2, r1
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <I2C_TransferConfig+0x68>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	43d2      	mvns	r2, r2
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	0011      	movs	r1, r2
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	059b      	lsls	r3, r3, #22
 8001a96:	0d9a      	lsrs	r2, r3, #22
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	0418      	lsls	r0, r3, #16
 8001a9e:	23ff      	movs	r3, #255	; 0xff
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	4003      	ands	r3, r0
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b005      	add	sp, #20
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	03ff63ff 	.word	0x03ff63ff

08001ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2241      	movs	r2, #65	; 0x41
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d138      	bne.n	8001b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	5c9b      	ldrb	r3, [r3, r2]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e032      	b.n	8001b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2241      	movs	r2, #65	; 0x41
 8001af4:	2124      	movs	r1, #36	; 0x24
 8001af6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2101      	movs	r1, #1
 8001b04:	438a      	bics	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4911      	ldr	r1, [pc, #68]	; (8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2241      	movs	r2, #65	; 0x41
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2240      	movs	r2, #64	; 0x40
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
  }
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	ffffefff 	.word	0xffffefff

08001b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2241      	movs	r2, #65	; 0x41
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d139      	bne.n	8001be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e033      	b.n	8001be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	; 0x41
 8001b8c:	2124      	movs	r1, #36	; 0x24
 8001b8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2241      	movs	r2, #65	; 0x41
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	2100      	movs	r1, #0
 8001be0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	fffff0ff 	.word	0xfffff0ff

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f000 fb76 	bl	80022f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x20>
 8001c12:	e08e      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c14:	4bc5      	ldr	r3, [pc, #788]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00e      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c20:	4bc2      	ldr	r3, [pc, #776]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	220c      	movs	r2, #12
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d117      	bne.n	8001c5c <HAL_RCC_OscConfig+0x68>
 8001c2c:	4bbf      	ldr	r3, [pc, #764]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	23c0      	movs	r3, #192	; 0xc0
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	401a      	ands	r2, r3
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	025b      	lsls	r3, r3, #9
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4bbb      	ldr	r3, [pc, #748]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d100      	bne.n	8001c4c <HAL_RCC_OscConfig+0x58>
 8001c4a:	e071      	b.n	8001d30 <HAL_RCC_OscConfig+0x13c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <HAL_RCC_OscConfig+0x62>
 8001c54:	e06c      	b.n	8001d30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f000 fb4c 	bl	80022f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x80>
 8001c64:	4bb1      	ldr	r3, [pc, #708]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4bb0      	ldr	r3, [pc, #704]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e02f      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0xa2>
 8001c7c:	4bab      	ldr	r3, [pc, #684]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4baa      	ldr	r3, [pc, #680]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c82:	49ab      	ldr	r1, [pc, #684]	; (8001f30 <HAL_RCC_OscConfig+0x33c>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4ba7      	ldr	r3, [pc, #668]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c8e:	49a9      	ldr	r1, [pc, #676]	; (8001f34 <HAL_RCC_OscConfig+0x340>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e01e      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0xc8>
 8001c9e:	4ba3      	ldr	r3, [pc, #652]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4ba2      	ldr	r3, [pc, #648]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	02c9      	lsls	r1, r1, #11
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4b9f      	ldr	r3, [pc, #636]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b9e      	ldr	r3, [pc, #632]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0249      	lsls	r1, r1, #9
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001cbc:	4b9b      	ldr	r3, [pc, #620]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b9a      	ldr	r3, [pc, #616]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cc2:	499b      	ldr	r1, [pc, #620]	; (8001f30 <HAL_RCC_OscConfig+0x33c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4b98      	ldr	r3, [pc, #608]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cce:	4999      	ldr	r1, [pc, #612]	; (8001f34 <HAL_RCC_OscConfig+0x340>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d014      	beq.n	8001d06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ffc6 	bl	8000c6c <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ffc1 	bl	8000c6c <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e2fd      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0xf2>
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe ffb1 	bl	8000c6c <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ffac 	bl	8000c6c <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e2e8      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x11c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <HAL_RCC_OscConfig+0x14a>
 8001d3c:	e06c      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	220c      	movs	r2, #12
 8001d44:	4013      	ands	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d48:	4b78      	ldr	r3, [pc, #480]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d11f      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1a0>
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	23c0      	movs	r3, #192	; 0xc0
 8001d5a:	025b      	lsls	r3, r3, #9
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x188>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2bb      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	22f8      	movs	r2, #248	; 0xf8
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00da      	lsls	r2, r3, #3
 8001d8c:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e041      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d024      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe ff60 	bl	8000c6c <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7fe ff5b 	bl	8000c6c <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e297      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f1      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	22f8      	movs	r2, #248	; 0xf8
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00da      	lsls	r2, r3, #3
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e018      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	438a      	bics	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe ff3b 	bl	8000c6c <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ff36 	bl	8000c6c <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e272      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f1      	bne.n	8001dfc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe ff19 	bl	8000c6c <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe ff14 	bl	8000c6c <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e250      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f1      	beq.n	8001e40 <HAL_RCC_OscConfig+0x24c>
 8001e5c:	e018      	b.n	8001e90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	438a      	bics	r2, r1
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe feff 	bl	8000c6c <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7fe fefa 	bl	8000c6c <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e236      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d1f1      	bne.n	8001e74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2204      	movs	r2, #4
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2a8>
 8001e9a:	e0b5      	b.n	8002008 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9c:	201f      	movs	r0, #31
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	055b      	lsls	r3, r3, #21
 8001eac:	4013      	ands	r3, r2
 8001eae:	d110      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0549      	lsls	r1, r1, #21
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	055b      	lsls	r3, r3, #21
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0049      	lsls	r1, r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eec:	f7fe febe 	bl	8000c6c <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe feb9 	bl	8000c6c <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1f5      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10f      	bne.n	8001f3c <HAL_RCC_OscConfig+0x348>
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	e036      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	fffeffff 	.word	0xfffeffff
 8001f34:	fffbffff 	.word	0xfffbffff
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x36a>
 8001f44:	4bca      	ldr	r3, [pc, #808]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	4bc9      	ldr	r3, [pc, #804]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
 8001f50:	4bc7      	ldr	r3, [pc, #796]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4bc6      	ldr	r3, [pc, #792]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	2104      	movs	r1, #4
 8001f58:	438a      	bics	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x38c>
 8001f66:	4bc2      	ldr	r3, [pc, #776]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	4bc1      	ldr	r3, [pc, #772]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	621a      	str	r2, [r3, #32]
 8001f72:	4bbf      	ldr	r3, [pc, #764]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4bbe      	ldr	r3, [pc, #760]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f80:	4bbb      	ldr	r3, [pc, #748]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4bba      	ldr	r3, [pc, #744]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	438a      	bics	r2, r1
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	4bb8      	ldr	r3, [pc, #736]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4bb7      	ldr	r3, [pc, #732]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f92:	2104      	movs	r1, #4
 8001f94:	438a      	bics	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d014      	beq.n	8001fca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fe64 	bl	8000c6c <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fe5f 	bl	8000c6c <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4aaf      	ldr	r2, [pc, #700]	; (8002274 <HAL_RCC_OscConfig+0x680>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e19a      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4bac      	ldr	r3, [pc, #688]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x3b6>
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fe4f 	bl	8000c6c <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fe4a 	bl	8000c6c <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	4aa5      	ldr	r2, [pc, #660]	; (8002274 <HAL_RCC_OscConfig+0x680>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e185      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4ba1      	ldr	r3, [pc, #644]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b9c      	ldr	r3, [pc, #624]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	4b9b      	ldr	r3, [pc, #620]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002002:	499d      	ldr	r1, [pc, #628]	; (8002278 <HAL_RCC_OscConfig+0x684>)
 8002004:	400a      	ands	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	4013      	ands	r3, r2
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d12a      	bne.n	8002070 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800201a:	4b95      	ldr	r3, [pc, #596]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800201c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201e:	4b94      	ldr	r3, [pc, #592]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002020:	2104      	movs	r1, #4
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002026:	4b92      	ldr	r3, [pc, #584]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe fe1b 	bl	8000c6c <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800203c:	f7fe fe16 	bl	8000c6c <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e152      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800204e:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d0f1      	beq.n	800203c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002058:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	22f8      	movs	r2, #248	; 0xf8
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	00da      	lsls	r2, r3, #3
 8002068:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	635a      	str	r2, [r3, #52]	; 0x34
 800206e:	e034      	b.n	80020da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	3305      	adds	r3, #5
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002078:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800207e:	2104      	movs	r1, #4
 8002080:	438a      	bics	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002084:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	22f8      	movs	r2, #248	; 0xf8
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	00da      	lsls	r2, r3, #3
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800209c:	4b74      	ldr	r3, [pc, #464]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800209e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a0:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020a8:	4b71      	ldr	r3, [pc, #452]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7fe fdda 	bl	8000c6c <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020be:	f7fe fdd5 	bl	8000c6c <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e111      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020d0:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f1      	bne.n	80020be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	4013      	ands	r3, r2
 80020e2:	d05c      	beq.n	800219e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020e4:	4b62      	ldr	r3, [pc, #392]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	220c      	movs	r2, #12
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d00e      	beq.n	800210e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d114      	bne.n	8002126 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020fc:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	401a      	ands	r2, r3
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	429a      	cmp	r2, r3
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	4013      	ands	r3, r2
 8002118:	d040      	beq.n	800219c <HAL_RCC_OscConfig+0x5a8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d03c      	beq.n	800219c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e6      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01b      	beq.n	8002166 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800212e:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002132:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0249      	lsls	r1, r1, #9
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fd96 	bl	8000c6c <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002146:	f7fe fd91 	bl	8000c6c <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0cd      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002158:	4b45      	ldr	r3, [pc, #276]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800215a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	4013      	ands	r3, r2
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x552>
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800216c:	4943      	ldr	r1, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0x688>)
 800216e:	400a      	ands	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fd7b 	bl	8000c6c <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217c:	f7fe fd76 	bl	8000c6c <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0b2      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4013      	ands	r3, r2
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x588>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800219c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d100      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5b4>
 80021a6:	e0a4      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	220c      	movs	r2, #12
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5c2>
 80021b4:	e078      	b.n	80022a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d14c      	bne.n	8002258 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	492e      	ldr	r1, [pc, #184]	; (8002280 <HAL_RCC_OscConfig+0x68c>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd4f 	bl	8000c6c <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fd4a 	bl	8000c6c <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e086      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	049b      	lsls	r3, r3, #18
 80021ee:	4013      	ands	r3, r2
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	220f      	movs	r2, #15
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_RCC_OscConfig+0x690>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	431a      	orrs	r2, r3
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0449      	lsls	r1, r1, #17
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fd1d 	bl	8000c6c <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fd18 	bl	8000c6c <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e054      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	049b      	lsls	r3, r3, #18
 8002252:	4013      	ands	r3, r2
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x644>
 8002256:	e04c      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_RCC_OscConfig+0x67c>)
 800225e:	4908      	ldr	r1, [pc, #32]	; (8002280 <HAL_RCC_OscConfig+0x68c>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fd02 	bl	8000c6c <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x6a6>
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	00001388 	.word	0x00001388
 8002278:	efffffff 	.word	0xefffffff
 800227c:	fffeffff 	.word	0xfffeffff
 8002280:	feffffff 	.word	0xfeffffff
 8002284:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fcf0 	bl	8000c6c <HAL_GetTick>
 800228c:	0002      	movs	r2, r0
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e02c      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_RCC_OscConfig+0x708>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	049b      	lsls	r3, r3, #18
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x694>
 80022a6:	e024      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01f      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_RCC_OscConfig+0x708>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x708>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	23c0      	movs	r3, #192	; 0xc0
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10e      	bne.n	80022ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	220f      	movs	r2, #15
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	23f0      	movs	r3, #240	; 0xf0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	401a      	ands	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b008      	add	sp, #32
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0bf      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d911      	bls.n	8002346 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b5e      	ldr	r3, [pc, #376]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0a6      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d015      	beq.n	800237c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2204      	movs	r2, #4
 8002356:	4013      	ands	r3, r2
 8002358:	d006      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800235a:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002360:	21e0      	movs	r1, #224	; 0xe0
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	22f0      	movs	r2, #240	; 0xf0
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d04c      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	4013      	ands	r3, r2
 8002398:	d120      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07a      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	049b      	lsls	r3, r3, #18
 80023ae:	4013      	ands	r3, r2
 80023b0:	d114      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06e      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	4013      	ands	r3, r2
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e062      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e05b      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4393      	bics	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc3c 	bl	8000c6c <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fc37 	bl	8000c6c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_RCC_ClockConfig+0x1a4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e042      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	220c      	movs	r2, #12
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1ec      	bne.n	80023fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d211      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e020      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_RCC_ClockConfig+0x1a8>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002470:	f000 f820 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002474:	0001      	movs	r1, r0
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	220f      	movs	r2, #15
 800247e:	4013      	ands	r3, r2
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1ac>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	000a      	movs	r2, r1
 8002486:	40da      	lsrs	r2, r3
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 800248a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fba7 	bl	8000be0 <HAL_InitTick>
  
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	00001388 	.word	0x00001388
 80024a8:	fffff8ff 	.word	0xfffff8ff
 80024ac:	08003910 	.word	0x08003910
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b08f      	sub	sp, #60	; 0x3c
 80024b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024ba:	2314      	movs	r3, #20
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xec>)
 80024c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024c2:	c313      	stmia	r3!, {r0, r1, r4}
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ce:	c313      	stmia	r3!, {r0, r1, r4}
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024e8:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	220c      	movs	r2, #12
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	d047      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0xd4>
 80024f8:	d849      	bhi.n	800258e <HAL_RCC_GetSysClockFreq+0xda>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x50>
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x56>
 8002502:	e044      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002508:	e044      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	220f      	movs	r2, #15
 8002510:	4013      	ands	r3, r2
 8002512:	2214      	movs	r2, #20
 8002514:	18ba      	adds	r2, r7, r2
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	220f      	movs	r2, #15
 8002520:	4013      	ands	r3, r2
 8002522:	1d3a      	adds	r2, r7, #4
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	401a      	ands	r2, r3
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	025b      	lsls	r3, r3, #9
 8002534:	429a      	cmp	r2, r3
 8002536:	d109      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253a:	481c      	ldr	r0, [pc, #112]	; (80025ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800253c:	f7fd fde4 	bl	8000108 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	001a      	movs	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	4353      	muls	r3, r2
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
 800254a:	e01a      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	23c0      	movs	r3, #192	; 0xc0
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	4353      	muls	r3, r2
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e008      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002572:	480e      	ldr	r0, [pc, #56]	; (80025ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002574:	f7fd fdc8 	bl	8000108 <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	001a      	movs	r2, r3
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	4353      	muls	r3, r2
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800258c:	e002      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002592:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b00f      	add	sp, #60	; 0x3c
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	080038f0 	.word	0x080038f0
 80025a4:	08003900 	.word	0x08003900
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	02dc6c00 	.word	0x02dc6c00

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	0001      	movs	r1, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	2207      	movs	r2, #7
 80025da:	4013      	ands	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	40d9      	lsrs	r1, r3
 80025e2:	000b      	movs	r3, r1
}    
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08003920 	.word	0x08003920

080025f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	4013      	ands	r3, r2
 800260e:	d100      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002610:	e08e      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2017      	movs	r0, #23
 8002614:	183b      	adds	r3, r7, r0
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	055b      	lsls	r3, r3, #21
 8002622:	4013      	ands	r3, r2
 8002624:	d110      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0549      	lsls	r1, r1, #21
 8002630:	430a      	orrs	r2, r1
 8002632:	61da      	str	r2, [r3, #28]
 8002634:	4b60      	ldr	r3, [pc, #384]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	055b      	lsls	r3, r3, #21
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	183b      	adds	r3, r7, r0
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d11a      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	0049      	lsls	r1, r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fe fb03 	bl	8000c6c <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	e008      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe fafe 	bl	8000c6c <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e097      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d0f0      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4013      	ands	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d034      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23c0      	movs	r3, #192	; 0xc0
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d02c      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ac:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a43      	ldr	r2, [pc, #268]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b6:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c4:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026ca:	493e      	ldr	r1, [pc, #248]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fac5 	bl	8000c6c <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	e009      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fac0 	bl	8000c6c <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4a35      	ldr	r2, [pc, #212]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e058      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002716:	430a      	orrs	r2, r1
 8002718:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271a:	2317      	movs	r3, #23
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800272a:	4928      	ldr	r1, [pc, #160]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800272c:	400a      	ands	r2, r1
 800272e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	2203      	movs	r2, #3
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800274a:	430a      	orrs	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	4013      	ands	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	2210      	movs	r2, #16
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002768:	430a      	orrs	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002788:	430a      	orrs	r2, r1
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4013      	ands	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	2240      	movs	r2, #64	; 0x40
 800279e:	4393      	bics	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b006      	add	sp, #24
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
 80027c0:	fffffcff 	.word	0xfffffcff
 80027c4:	fffeffff 	.word	0xfffeffff
 80027c8:	00001388 	.word	0x00001388
 80027cc:	efffffff 	.word	0xefffffff

080027d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e042      	b.n	8002868 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223d      	movs	r2, #61	; 0x3d
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223c      	movs	r2, #60	; 0x3c
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe f8c5 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	; 0x3d
 8002802:	2102      	movs	r1, #2
 8002804:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f000 f871 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2246      	movs	r2, #70	; 0x46
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223e      	movs	r2, #62	; 0x3e
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2241      	movs	r2, #65	; 0x41
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2242      	movs	r2, #66	; 0x42
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2243      	movs	r2, #67	; 0x43
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2244      	movs	r2, #68	; 0x44
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2245      	movs	r2, #69	; 0x45
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223d      	movs	r2, #61	; 0x3d
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e02e      	b.n	80028e6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223d      	movs	r2, #61	; 0x3d
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_Base_Start+0x80>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00a      	beq.n	80028b0 <HAL_TIM_Base_Start+0x40>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d004      	beq.n	80028b0 <HAL_TIM_Base_Start+0x40>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIM_Base_Start+0x84>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2207      	movs	r2, #7
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d010      	beq.n	80028e4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	e007      	b.n	80028e4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <TIM_Base_SetConfig+0xd4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d008      	beq.n	8002922 <TIM_Base_SetConfig+0x2a>
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	429a      	cmp	r2, r3
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0x2a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <TIM_Base_SetConfig+0xd8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2270      	movs	r2, #112	; 0x70
 8002926:	4393      	bics	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_Base_SetConfig+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d014      	beq.n	8002966 <TIM_Base_SetConfig+0x6e>
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	05db      	lsls	r3, r3, #23
 8002942:	429a      	cmp	r2, r3
 8002944:	d00f      	beq.n	8002966 <TIM_Base_SetConfig+0x6e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <TIM_Base_SetConfig+0xd8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_Base_SetConfig+0x6e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <TIM_Base_SetConfig+0xdc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x6e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <TIM_Base_SetConfig+0xe0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x6e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <TIM_Base_SetConfig+0xe4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_Base_SetConfig+0xe8>)
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	4393      	bics	r3, r2
 800297e:	001a      	movs	r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <TIM_Base_SetConfig+0xd4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_Base_SetConfig+0xbe>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <TIM_Base_SetConfig+0xe0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0xbe>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <TIM_Base_SetConfig+0xe4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d103      	bne.n	80029be <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	615a      	str	r2, [r3, #20]
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40002000 	.word	0x40002000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	fffffcff 	.word	0xfffffcff

080029e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e044      	b.n	8002a80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2274      	movs	r2, #116	; 0x74
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fd ffdd 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2224      	movs	r2, #36	; 0x24
 8002a12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	438a      	bics	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fbe8 	bl	80031fc <UART_SetConfig>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e024      	b.n	8002a80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 fd1b 	bl	800347c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	490d      	ldr	r1, [pc, #52]	; (8002a88 <HAL_UART_Init+0xa4>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	212a      	movs	r1, #42	; 0x2a
 8002a62:	438a      	bics	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 fdb3 	bl	80035e4 <UART_CheckIdleState>
 8002a7e:	0003      	movs	r3, r0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	ffffb7ff 	.word	0xffffb7ff

08002a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d000      	beq.n	8002aa6 <HAL_UART_Transmit+0x1a>
 8002aa4:	e096      	b.n	8002bd4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_UART_Transmit+0x28>
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e08e      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d109      	bne.n	8002ad8 <HAL_UART_Transmit+0x4c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e07e      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2274      	movs	r2, #116	; 0x74
 8002adc:	5c9b      	ldrb	r3, [r3, r2]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Transmit+0x5a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e077      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2274      	movs	r2, #116	; 0x74
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	2100      	movs	r1, #0
 8002af4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f8b6 	bl	8000c6c <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1dba      	adds	r2, r7, #6
 8002b08:	2150      	movs	r1, #80	; 0x50
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1dba      	adds	r2, r7, #6
 8002b12:	2152      	movs	r1, #82	; 0x52
 8002b14:	8812      	ldrh	r2, [r2, #0]
 8002b16:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	015b      	lsls	r3, r3, #5
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d108      	bne.n	8002b36 <HAL_UART_Transmit+0xaa>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e003      	b.n	8002b3e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2274      	movs	r2, #116	; 0x74
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b46:	e02d      	b.n	8002ba4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	0013      	movs	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	f000 fd8d 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e039      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	05d2      	lsls	r2, r2, #23
 8002b72:	0dd2      	lsrs	r2, r2, #23
 8002b74:	b292      	uxth	r2, r2
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e008      	b.n	8002b92 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2252      	movs	r2, #82	; 0x52
 8002b96:	5a9b      	ldrh	r3, [r3, r2]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b299      	uxth	r1, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2252      	movs	r2, #82	; 0x52
 8002ba2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2252      	movs	r2, #82	; 0x52
 8002ba8:	5a9b      	ldrh	r3, [r3, r2]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1cb      	bne.n	8002b48 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	0013      	movs	r3, r2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	f000 fd59 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e005      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b008      	add	sp, #32
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d000      	beq.n	8002bfa <HAL_UART_Receive+0x1a>
 8002bf8:	e0da      	b.n	8002db0 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_UART_Receive+0x28>
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0d2      	b.n	8002db2 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d109      	bne.n	8002c2c <HAL_UART_Receive+0x4c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0c2      	b.n	8002db2 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2274      	movs	r2, #116	; 0x74
 8002c30:	5c9b      	ldrb	r3, [r3, r2]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Receive+0x5a>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0bb      	b.n	8002db2 <HAL_UART_Receive+0x1d2>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2274      	movs	r2, #116	; 0x74
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	2100      	movs	r1, #0
 8002c48:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2222      	movs	r2, #34	; 0x22
 8002c4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c56:	f7fe f809 	bl	8000c6c <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1dba      	adds	r2, r7, #6
 8002c62:	2158      	movs	r1, #88	; 0x58
 8002c64:	8812      	ldrh	r2, [r2, #0]
 8002c66:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1dba      	adds	r2, r7, #6
 8002c6c:	215a      	movs	r1, #90	; 0x5a
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	015b      	lsls	r3, r3, #5
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d10d      	bne.n	8002c9a <HAL_UART_Receive+0xba>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <HAL_UART_Receive+0xb0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	225c      	movs	r2, #92	; 0x5c
 8002c8a:	494c      	ldr	r1, [pc, #304]	; (8002dbc <HAL_UART_Receive+0x1dc>)
 8002c8c:	5299      	strh	r1, [r3, r2]
 8002c8e:	e02e      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	225c      	movs	r2, #92	; 0x5c
 8002c94:	21ff      	movs	r1, #255	; 0xff
 8002c96:	5299      	strh	r1, [r3, r2]
 8002c98:	e029      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_UART_Receive+0xde>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Receive+0xd4>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	225c      	movs	r2, #92	; 0x5c
 8002cae:	21ff      	movs	r1, #255	; 0xff
 8002cb0:	5299      	strh	r1, [r3, r2]
 8002cb2:	e01c      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	225c      	movs	r2, #92	; 0x5c
 8002cb8:	217f      	movs	r1, #127	; 0x7f
 8002cba:	5299      	strh	r1, [r3, r2]
 8002cbc:	e017      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	055b      	lsls	r3, r3, #21
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_UART_Receive+0x106>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_UART_Receive+0xfc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	225c      	movs	r2, #92	; 0x5c
 8002cd6:	217f      	movs	r1, #127	; 0x7f
 8002cd8:	5299      	strh	r1, [r3, r2]
 8002cda:	e008      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	225c      	movs	r2, #92	; 0x5c
 8002ce0:	213f      	movs	r1, #63	; 0x3f
 8002ce2:	5299      	strh	r1, [r3, r2]
 8002ce4:	e003      	b.n	8002cee <HAL_UART_Receive+0x10e>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	225c      	movs	r2, #92	; 0x5c
 8002cea:	2100      	movs	r1, #0
 8002cec:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002cee:	2312      	movs	r3, #18
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	215c      	movs	r1, #92	; 0x5c
 8002cf6:	5a52      	ldrh	r2, [r2, r1]
 8002cf8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	015b      	lsls	r3, r3, #5
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d108      	bne.n	8002d18 <HAL_UART_Receive+0x138>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e003      	b.n	8002d20 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2274      	movs	r2, #116	; 0x74
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d28:	e037      	b.n	8002d9a <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0013      	movs	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	2120      	movs	r1, #32
 8002d38:	f000 fc9c 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e036      	b.n	8002db2 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2212      	movs	r2, #18
 8002d54:	18ba      	adds	r2, r7, r2
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	3302      	adds	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e00f      	b.n	8002d88 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2212      	movs	r2, #18
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	225a      	movs	r2, #90	; 0x5a
 8002d8c:	5a9b      	ldrh	r3, [r3, r2]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b299      	uxth	r1, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	225a      	movs	r2, #90	; 0x5a
 8002d98:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	225a      	movs	r2, #90	; 0x5a
 8002d9e:	5a9b      	ldrh	r3, [r3, r2]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1c1      	bne.n	8002d2a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b008      	add	sp, #32
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	000001ff 	.word	0x000001ff

08002dc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4ab4      	ldr	r2, [pc, #720]	; (80030b4 <HAL_UART_IRQHandler+0x2f4>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d112      	bne.n	8002e14 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2220      	movs	r2, #32
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d00a      	beq.n	8002e14 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d100      	bne.n	8002e08 <HAL_UART_IRQHandler+0x48>
 8002e06:	e1cf      	b.n	80031a8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	0010      	movs	r0, r2
 8002e10:	4798      	blx	r3
      }
      return;
 8002e12:	e1c9      	b.n	80031a8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d100      	bne.n	8002e1c <HAL_UART_IRQHandler+0x5c>
 8002e1a:	e0d9      	b.n	8002fd0 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4013      	ands	r3, r2
 8002e22:	d104      	bne.n	8002e2e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4aa4      	ldr	r2, [pc, #656]	; (80030b8 <HAL_UART_IRQHandler+0x2f8>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <HAL_UART_IRQHandler+0x6e>
 8002e2c:	e0d0      	b.n	8002fd0 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d010      	beq.n	8002e58 <HAL_UART_IRQHandler+0x98>
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	589b      	ldr	r3, [r3, r2]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d00f      	beq.n	8002e80 <HAL_UART_IRQHandler+0xc0>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	589b      	ldr	r3, [r3, r2]
 8002e76:	2204      	movs	r2, #4
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d00f      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xe8>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2204      	movs	r2, #4
 8002e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	589b      	ldr	r3, [r3, r2]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	4013      	ands	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	589b      	ldr	r3, [r3, r2]
 8002ece:	2208      	movs	r2, #8
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d011      	beq.n	8002f06 <HAL_UART_IRQHandler+0x146>
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	04db      	lsls	r3, r3, #19
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d00c      	beq.n	8002f06 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	589b      	ldr	r3, [r3, r2]
 8002efc:	2220      	movs	r2, #32
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	589b      	ldr	r3, [r3, r2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d100      	bne.n	8002f12 <HAL_UART_IRQHandler+0x152>
 8002f10:	e14c      	b.n	80031ac <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2220      	movs	r2, #32
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00c      	beq.n	8002f34 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d008      	beq.n	8002f34 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	0010      	movs	r0, r2
 8002f32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	589b      	ldr	r3, [r3, r2]
 8002f3a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d003      	beq.n	8002f52 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2228      	movs	r2, #40	; 0x28
 8002f4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f50:	d033      	beq.n	8002fba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 fc0b 	bl	8003770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d123      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	438a      	bics	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_UART_IRQHandler+0x2fc>)
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fd fff9 	bl	8000f84 <HAL_DMA_Abort_IT>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d01a      	beq.n	8002fcc <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e012      	b.n	8002fcc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f913 	bl	80031d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fae:	e00d      	b.n	8002fcc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 f90e 	bl	80031d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	e008      	b.n	8002fcc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f909 	bl	80031d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002fca:	e0ef      	b.n	80031ac <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	46c0      	nop			; (mov r8, r8)
    return;
 8002fce:	e0ed      	b.n	80031ac <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d000      	beq.n	8002fda <HAL_UART_IRQHandler+0x21a>
 8002fd8:	e0b3      	b.n	8003142 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x224>
 8002fe2:	e0ae      	b.n	8003142 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d100      	bne.n	8002fee <HAL_UART_IRQHandler+0x22e>
 8002fec:	e0a9      	b.n	8003142 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d15f      	bne.n	80030c4 <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	2108      	movs	r1, #8
 800300e:	187b      	adds	r3, r7, r1
 8003010:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8003012:	187b      	adds	r3, r7, r1
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d100      	bne.n	800301c <HAL_UART_IRQHandler+0x25c>
 800301a:	e0c9      	b.n	80031b0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2258      	movs	r2, #88	; 0x58
 8003020:	5a9b      	ldrh	r3, [r3, r2]
 8003022:	187a      	adds	r2, r7, r1
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d300      	bcc.n	800302c <HAL_UART_IRQHandler+0x26c>
 800302a:	e0c1      	b.n	80031b0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	187a      	adds	r2, r7, r1
 8003030:	215a      	movs	r1, #90	; 0x5a
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b20      	cmp	r3, #32
 800303e:	d02a      	beq.n	8003096 <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	491d      	ldr	r1, [pc, #116]	; (80030c0 <HAL_UART_IRQHandler+0x300>)
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2140      	movs	r1, #64	; 0x40
 800306c:	438a      	bics	r2, r1
 800306e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2110      	movs	r1, #16
 8003088:	438a      	bics	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd ff3f 	bl	8000f14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2258      	movs	r2, #88	; 0x58
 800309a:	5a9a      	ldrh	r2, [r3, r2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	215a      	movs	r1, #90	; 0x5a
 80030a0:	5a5b      	ldrh	r3, [r3, r1]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f899 	bl	80031e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030b2:	e07d      	b.n	80031b0 <HAL_UART_IRQHandler+0x3f0>
 80030b4:	0000080f 	.word	0x0000080f
 80030b8:	04000120 	.word	0x04000120
 80030bc:	080037d1 	.word	0x080037d1
 80030c0:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2258      	movs	r2, #88	; 0x58
 80030c8:	5a99      	ldrh	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	225a      	movs	r2, #90	; 0x5a
 80030ce:	5a9b      	ldrh	r3, [r3, r2]
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	200a      	movs	r0, #10
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	1a8a      	subs	r2, r1, r2
 80030d8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	225a      	movs	r2, #90	; 0x5a
 80030de:	5a9b      	ldrh	r3, [r3, r2]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d100      	bne.n	80030e8 <HAL_UART_IRQHandler+0x328>
 80030e6:	e065      	b.n	80031b4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d061      	beq.n	80031b4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4931      	ldr	r1, [pc, #196]	; (80031c0 <HAL_UART_IRQHandler+0x400>)
 80030fc:	400a      	ands	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2110      	movs	r1, #16
 800312e:	438a      	bics	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003132:	183b      	adds	r3, r7, r0
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f852 	bl	80031e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003140:	e038      	b.n	80031b4 <HAL_UART_IRQHandler+0x3f4>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	035b      	lsls	r3, r3, #13
 8003148:	4013      	ands	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_UART_IRQHandler+0x3aa>
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	03db      	lsls	r3, r3, #15
 8003152:	4013      	ands	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	0352      	lsls	r2, r2, #13
 800315e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0018      	movs	r0, r3
 8003164:	f000 fb65 	bl	8003832 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003168:	e027      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	4013      	ands	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	4013      	ands	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_UART_IRQHandler+0x3ce>
  {
    if (huart->TxISR != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01a      	beq.n	80031b8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	0010      	movs	r0, r2
 800318a:	4798      	blx	r3
    }
    return;
 800318c:	e014      	b.n	80031b8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2240      	movs	r2, #64	; 0x40
 8003192:	4013      	ands	r3, r2
 8003194:	d011      	beq.n	80031ba <HAL_UART_IRQHandler+0x3fa>
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	4013      	ands	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 fb2c 	bl	80037fe <UART_EndTransmit_IT>
    return;
 80031a6:	e008      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	e006      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	e004      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	e002      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	e000      	b.n	80031ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80031b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b008      	add	sp, #32
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	fffffedf 	.word	0xfffffedf

080031c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	000a      	movs	r2, r1
 80031ee:	1cbb      	adds	r3, r7, #2
 80031f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003204:	231e      	movs	r3, #30
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8d      	ldr	r2, [pc, #564]	; (8003460 <UART_SetConfig+0x264>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a88      	ldr	r2, [pc, #544]	; (8003464 <UART_SetConfig+0x268>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a7f      	ldr	r2, [pc, #508]	; (8003468 <UART_SetConfig+0x26c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7b      	ldr	r2, [pc, #492]	; (800346c <UART_SetConfig+0x270>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d127      	bne.n	80032d2 <UART_SetConfig+0xd6>
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <UART_SetConfig+0x274>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	2203      	movs	r2, #3
 8003288:	4013      	ands	r3, r2
 800328a:	2b03      	cmp	r3, #3
 800328c:	d00d      	beq.n	80032aa <UART_SetConfig+0xae>
 800328e:	d81b      	bhi.n	80032c8 <UART_SetConfig+0xcc>
 8003290:	2b02      	cmp	r3, #2
 8003292:	d014      	beq.n	80032be <UART_SetConfig+0xc2>
 8003294:	d818      	bhi.n	80032c8 <UART_SetConfig+0xcc>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <UART_SetConfig+0xa4>
 800329a:	2b01      	cmp	r3, #1
 800329c:	d00a      	beq.n	80032b4 <UART_SetConfig+0xb8>
 800329e:	e013      	b.n	80032c8 <UART_SetConfig+0xcc>
 80032a0:	231f      	movs	r3, #31
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e021      	b.n	80032ee <UART_SetConfig+0xf2>
 80032aa:	231f      	movs	r3, #31
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e01c      	b.n	80032ee <UART_SetConfig+0xf2>
 80032b4:	231f      	movs	r3, #31
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2204      	movs	r2, #4
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e017      	b.n	80032ee <UART_SetConfig+0xf2>
 80032be:	231f      	movs	r3, #31
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2208      	movs	r2, #8
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e012      	b.n	80032ee <UART_SetConfig+0xf2>
 80032c8:	231f      	movs	r3, #31
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2210      	movs	r2, #16
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e00d      	b.n	80032ee <UART_SetConfig+0xf2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a67      	ldr	r2, [pc, #412]	; (8003474 <UART_SetConfig+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d104      	bne.n	80032e6 <UART_SetConfig+0xea>
 80032dc:	231f      	movs	r3, #31
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e003      	b.n	80032ee <UART_SetConfig+0xf2>
 80032e6:	231f      	movs	r3, #31
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2210      	movs	r2, #16
 80032ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d15d      	bne.n	80033b6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80032fa:	231f      	movs	r3, #31
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d015      	beq.n	8003330 <UART_SetConfig+0x134>
 8003304:	dc18      	bgt.n	8003338 <UART_SetConfig+0x13c>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00d      	beq.n	8003326 <UART_SetConfig+0x12a>
 800330a:	dc15      	bgt.n	8003338 <UART_SetConfig+0x13c>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <UART_SetConfig+0x11a>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d005      	beq.n	8003320 <UART_SetConfig+0x124>
 8003314:	e010      	b.n	8003338 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff f957 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 800331a:	0003      	movs	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]
        break;
 800331e:	e012      	b.n	8003346 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <UART_SetConfig+0x27c>)
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e00f      	b.n	8003346 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7ff f8c5 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 800332a:	0003      	movs	r3, r0
 800332c:	61bb      	str	r3, [r7, #24]
        break;
 800332e:	e00a      	b.n	8003346 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	61bb      	str	r3, [r7, #24]
        break;
 8003336:	e006      	b.n	8003346 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333c:	231e      	movs	r3, #30
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
        break;
 8003344:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d100      	bne.n	800334e <UART_SetConfig+0x152>
 800334c:	e07b      	b.n	8003446 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	005a      	lsls	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	18d2      	adds	r2, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7fc fed1 	bl	8000108 <__udivsi3>
 8003366:	0003      	movs	r3, r0
 8003368:	b29b      	uxth	r3, r3
 800336a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d91c      	bls.n	80033ac <UART_SetConfig+0x1b0>
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	025b      	lsls	r3, r3, #9
 8003378:	429a      	cmp	r2, r3
 800337a:	d217      	bcs.n	80033ac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	b29a      	uxth	r2, r3
 8003380:	200e      	movs	r0, #14
 8003382:	183b      	adds	r3, r7, r0
 8003384:	210f      	movs	r1, #15
 8003386:	438a      	bics	r2, r1
 8003388:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	2207      	movs	r2, #7
 8003392:	4013      	ands	r3, r2
 8003394:	b299      	uxth	r1, r3
 8003396:	183b      	adds	r3, r7, r0
 8003398:	183a      	adds	r2, r7, r0
 800339a:	8812      	ldrh	r2, [r2, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	183a      	adds	r2, r7, r0
 80033a6:	8812      	ldrh	r2, [r2, #0]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e04c      	b.n	8003446 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80033ac:	231e      	movs	r3, #30
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e047      	b.n	8003446 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b6:	231f      	movs	r3, #31
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d015      	beq.n	80033ec <UART_SetConfig+0x1f0>
 80033c0:	dc18      	bgt.n	80033f4 <UART_SetConfig+0x1f8>
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00d      	beq.n	80033e2 <UART_SetConfig+0x1e6>
 80033c6:	dc15      	bgt.n	80033f4 <UART_SetConfig+0x1f8>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <UART_SetConfig+0x1d6>
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d005      	beq.n	80033dc <UART_SetConfig+0x1e0>
 80033d0:	e010      	b.n	80033f4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d2:	f7ff f8f9 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80033d6:	0003      	movs	r3, r0
 80033d8:	61bb      	str	r3, [r7, #24]
        break;
 80033da:	e012      	b.n	8003402 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <UART_SetConfig+0x27c>)
 80033de:	61bb      	str	r3, [r7, #24]
        break;
 80033e0:	e00f      	b.n	8003402 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7ff f867 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 80033e6:	0003      	movs	r3, r0
 80033e8:	61bb      	str	r3, [r7, #24]
        break;
 80033ea:	e00a      	b.n	8003402 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	61bb      	str	r3, [r7, #24]
        break;
 80033f2:	e006      	b.n	8003402 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033f8:	231e      	movs	r3, #30
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
        break;
 8003400:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01e      	beq.n	8003446 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	085a      	lsrs	r2, r3, #1
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	18d2      	adds	r2, r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f7fc fe75 	bl	8000108 <__udivsi3>
 800341e:	0003      	movs	r3, r0
 8003420:	b29b      	uxth	r3, r3
 8003422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d909      	bls.n	800343e <UART_SetConfig+0x242>
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	025b      	lsls	r3, r3, #9
 8003430:	429a      	cmp	r2, r3
 8003432:	d204      	bcs.n	800343e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e003      	b.n	8003446 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800343e:	231e      	movs	r3, #30
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003452:	231e      	movs	r3, #30
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b008      	add	sp, #32
 800345e:	bd80      	pop	{r7, pc}
 8003460:	efff69f3 	.word	0xefff69f3
 8003464:	ffffcfff 	.word	0xffffcfff
 8003468:	fffff4ff 	.word	0xfffff4ff
 800346c:	40013800 	.word	0x40013800
 8003470:	40021000 	.word	0x40021000
 8003474:	40004400 	.word	0x40004400
 8003478:	007a1200 	.word	0x007a1200

0800347c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2201      	movs	r2, #1
 800348a:	4013      	ands	r3, r2
 800348c:	d00b      	beq.n	80034a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a4a      	ldr	r2, [pc, #296]	; (80035c0 <UART_AdvFeatureConfig+0x144>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2202      	movs	r2, #2
 80034ac:	4013      	ands	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a43      	ldr	r2, [pc, #268]	; (80035c4 <UART_AdvFeatureConfig+0x148>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2204      	movs	r2, #4
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00b      	beq.n	80034ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <UART_AdvFeatureConfig+0x14c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2208      	movs	r2, #8
 80034f0:	4013      	ands	r3, r2
 80034f2:	d00b      	beq.n	800350c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <UART_AdvFeatureConfig+0x150>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2210      	movs	r2, #16
 8003512:	4013      	ands	r3, r2
 8003514:	d00b      	beq.n	800352e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <UART_AdvFeatureConfig+0x154>)
 800351e:	4013      	ands	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2220      	movs	r2, #32
 8003534:	4013      	ands	r3, r2
 8003536:	d00b      	beq.n	8003550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <UART_AdvFeatureConfig+0x158>)
 8003540:	4013      	ands	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	d01d      	beq.n	8003596 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <UART_AdvFeatureConfig+0x15c>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	035b      	lsls	r3, r3, #13
 800357a:	429a      	cmp	r2, r3
 800357c:	d10b      	bne.n	8003596 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <UART_AdvFeatureConfig+0x160>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	4013      	ands	r3, r2
 800359e:	d00b      	beq.n	80035b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <UART_AdvFeatureConfig+0x164>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	fffdffff 	.word	0xfffdffff
 80035c4:	fffeffff 	.word	0xfffeffff
 80035c8:	fffbffff 	.word	0xfffbffff
 80035cc:	ffff7fff 	.word	0xffff7fff
 80035d0:	ffffefff 	.word	0xffffefff
 80035d4:	ffffdfff 	.word	0xffffdfff
 80035d8:	ffefffff 	.word	0xffefffff
 80035dc:	ff9fffff 	.word	0xff9fffff
 80035e0:	fff7ffff 	.word	0xfff7ffff

080035e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	2100      	movs	r1, #0
 80035f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035f4:	f7fd fb3a 	bl	8000c6c <HAL_GetTick>
 80035f8:	0003      	movs	r3, r0
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2208      	movs	r2, #8
 8003604:	4013      	ands	r3, r2
 8003606:	2b08      	cmp	r3, #8
 8003608:	d10c      	bne.n	8003624 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0391      	lsls	r1, r2, #14
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <UART_CheckIdleState+0x8c>)
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	f000 f82c 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d001      	beq.n	8003624 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e021      	b.n	8003668 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2204      	movs	r2, #4
 800362c:	4013      	ands	r3, r2
 800362e:	2b04      	cmp	r3, #4
 8003630:	d10c      	bne.n	800364c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	03d1      	lsls	r1, r2, #15
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <UART_CheckIdleState+0x8c>)
 800363c:	9200      	str	r2, [sp, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	f000 f818 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e00d      	b.n	8003668 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2274      	movs	r2, #116	; 0x74
 8003662:	2100      	movs	r1, #0
 8003664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}
 8003670:	01ffffff 	.word	0x01ffffff

08003674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003684:	e05e      	b.n	8003744 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3301      	adds	r3, #1
 800368a:	d05b      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd faee 	bl	8000c6c <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11b      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	492f      	ldr	r1, [pc, #188]	; (800376c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	438a      	bics	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2274      	movs	r2, #116	; 0x74
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e044      	b.n	8003764 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	d02e      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	401a      	ands	r2, r3
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d124      	bne.n	8003744 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4917      	ldr	r1, [pc, #92]	; (800376c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	2120      	movs	r1, #32
 8003736:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2274      	movs	r2, #116	; 0x74
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e00f      	b.n	8003764 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	425a      	negs	r2, r3
 8003754:	4153      	adcs	r3, r2
 8003756:	b2db      	uxtb	r3, r3
 8003758:	001a      	movs	r2, r3
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d091      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	fffffe5f 	.word	0xfffffe5f

08003770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4912      	ldr	r1, [pc, #72]	; (80037cc <UART_EndRxTransfer+0x5c>)
 8003784:	400a      	ands	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2110      	movs	r1, #16
 80037ac:	438a      	bics	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	fffffedf 	.word	0xfffffedf

080037d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	225a      	movs	r2, #90	; 0x5a
 80037e2:	2100      	movs	r1, #0
 80037e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2252      	movs	r2, #82	; 0x52
 80037ea:	2100      	movs	r1, #0
 80037ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff fcef 	bl	80031d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff fccd 	bl	80031c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	2600      	movs	r6, #0
 8003848:	4d0c      	ldr	r5, [pc, #48]	; (800387c <__libc_init_array+0x38>)
 800384a:	4c0d      	ldr	r4, [pc, #52]	; (8003880 <__libc_init_array+0x3c>)
 800384c:	1b64      	subs	r4, r4, r5
 800384e:	10a4      	asrs	r4, r4, #2
 8003850:	42a6      	cmp	r6, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	2600      	movs	r6, #0
 8003856:	f000 f821 	bl	800389c <_init>
 800385a:	4d0a      	ldr	r5, [pc, #40]	; (8003884 <__libc_init_array+0x40>)
 800385c:	4c0a      	ldr	r4, [pc, #40]	; (8003888 <__libc_init_array+0x44>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	42a6      	cmp	r6, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	00b3      	lsls	r3, r6, #2
 800386a:	58eb      	ldr	r3, [r5, r3]
 800386c:	4798      	blx	r3
 800386e:	3601      	adds	r6, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	00b3      	lsls	r3, r6, #2
 8003874:	58eb      	ldr	r3, [r5, r3]
 8003876:	4798      	blx	r3
 8003878:	3601      	adds	r6, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	08003928 	.word	0x08003928
 8003880:	08003928 	.word	0x08003928
 8003884:	08003928 	.word	0x08003928
 8003888:	0800392c 	.word	0x0800392c

0800388c <memset>:
 800388c:	0003      	movs	r3, r0
 800388e:	1882      	adds	r2, r0, r2
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	7019      	strb	r1, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
